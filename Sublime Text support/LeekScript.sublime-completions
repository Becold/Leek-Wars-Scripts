{
	"scope": "source.ls",
	"completions":
	[
		{ "trigger": "abs\t(number)", "contents": "abs(${1:number})" },
		{ "trigger": "acos\t(argument)", "contents": "acos(${1:argument})" },
		{ "trigger": "asin\t(argument)", "contents": "asin(${1:argument})" },
		{ "trigger": "atan\t(argument)", "contents": "atan(${1:argument})" },
		{ "trigger": "atan2\t(y, x)", "contents": "atan2(${1:y}, ${2:x})" },
		{ "trigger": "cbrt\t(number)", "contents": "cbrt(${1:number})" },
		{ "trigger": "ceil\t(number)", "contents": "ceil(${1:number})" },
		{ "trigger": "cos\t(angle)", "contents": "cos(${1:angle})" },
		{ "trigger": "exp\t(number)", "contents": "exp(${1:number})" },
		{ "trigger": "floor\t(number)", "contents": "floor(${1:number})" },
		{ "trigger": "hypot\t(x, y)", "contents": "hypot(${1:x}, ${2:y})" },
		{ "trigger": "log\t(number)", "contents": "log(${1:number})" },
		{ "trigger": "log10\t(number)", "contents": "log10(${1:number})" },
		{ "trigger": "max\t(a, b)", "contents": "max(${1:a}, ${2:b})" },
		{ "trigger": "min\t(a, b)", "contents": "min(${1:a}, ${2:b})" },
		{ "trigger": "number\t(value)", "contents": "number(${1:value})" },
		{ "trigger": "pow\t(base, exp)", "contents": "pow(${1:base}, ${2:exp})" },
		{ "trigger": "rand", "contents": "rand()" },
		{ "trigger": "randFloat\t(a, b)", "contents": "randFloat(${1:a}, ${2:b})" },
		{ "trigger": "randInt\t(a, b)", "contents": "randInt(${1:a}, ${2:b})" },
		{ "trigger": "round\t(number)", "contents": "round(${1:number})" },
		{ "trigger": "signum\t(number)", "contents": "signum(${1:number})" },
		{ "trigger": "sin\t(angle)", "contents": "sin(${1:angle})" },
		{ "trigger": "sqrt\t(number)", "contents": "sqrt(${1:number})" },
		{ "trigger": "tan\t(angle)", "contents": "tan(${1:angle})" },
		{ "trigger": "toDegrees\t(radians)", "contents": "toDegrees(${1:radians})" },
		{ "trigger": "toRadians\t(degrees)", "contents": "toRadians(${1:degrees})" },
		{ "trigger": "charAt\t(string, position)", "contents": "charAt(${1:string}, ${2:position})" },
		{ "trigger": "contains\t(string, search)", "contents": "contains(${1:string}, ${2:search})" },
		{ "trigger": "endsWith\t(string, suffix)", "contents": "endsWith(${1:string}, ${2:suffix})" },
		{ "trigger": "indexOf\t(string, search)", "contents": "indexOf(${1:string}, ${2:search})" },
		{ "trigger": "indexOf\t(string, search, start)", "contents": "indexOf(${1:string}, ${2:search}, ${3:start})" },
		{ "trigger": "length\t(string)", "contents": "length(${1:string})" },
		{ "trigger": "replace\t(string, search, replace)", "contents": "replace(${1:string}, ${2:search}, ${3:replace})" },
		{ "trigger": "split\t(string, delimiter)", "contents": "split(${1:string}, ${2:delimiter})" },
		{ "trigger": "split\t(string, delimiter, limit)", "contents": "split(${1:string}, ${2:delimiter}, ${3:limit})" },
		{ "trigger": "startsWith\t(string, prefix)", "contents": "startsWith(${1:string}, ${2:prefix})" },
		{ "trigger": "string\t(value)", "contents": "string(${1:value})" },
		{ "trigger": "substring\t(string, start)", "contents": "substring(${1:string}, ${2:start})" },
		{ "trigger": "substring\t(string, start, length)", "contents": "substring(${1:string}, ${2:start}, ${3:length})" },
		{ "trigger": "toLower\t(string)", "contents": "toLower(${1:string})" },
		{ "trigger": "toUpper\t(string)", "contents": "toUpper(${1:string})" },
		{ "trigger": "arrayConcat\t(array1, array2)", "contents": "arrayConcat(${1:array1}, ${2:array2})" },
		{ "trigger": "arrayFilter\t(array, callback)", "contents": "arrayFilter(${1:array}, ${2:callback})" },
		{ "trigger": "arrayFlatten\t(array)", "contents": "arrayFlatten(${1:array})" },
		{ "trigger": "arrayFlatten\t(array, depth)", "contents": "arrayFlatten(${1:array}, ${2:depth})" },
		{ "trigger": "arrayFoldLeft\t(array, f, v0)", "contents": "arrayFoldLeft(${1:array}, ${2:f}, ${3:v0})" },
		{ "trigger": "arrayFoldRight\t(array, f, v0)", "contents": "arrayFoldRight(${1:array}, ${2:f}, ${3:v0})" },
		{ "trigger": "arrayIter\t(array, callback)", "contents": "arrayIter(${1:array}, ${2:callback})" },
		{ "trigger": "arrayMap\t(array, callback)", "contents": "arrayMap(${1:array}, ${2:callback})" },
		{ "trigger": "arrayMax\t(array)", "contents": "arrayMax(${1:array})" },
		{ "trigger": "arrayMin\t(array)", "contents": "arrayMin(${1:array})" },
		{ "trigger": "arrayPartition\t(array, callback)", "contents": "arrayPartition(${1:array}, ${2:callback})" },
		{ "trigger": "arraySort\t(array, callback)", "contents": "arraySort(${1:array}, ${2:callback})" },
		{ "trigger": "assocSort\t(array)", "contents": "assocSort(${1:array})" },
		{ "trigger": "assocSort\t(array, order)", "contents": "assocSort(${1:array}, ${2:order})" },
		{ "trigger": "average\t(array)", "contents": "average(${1:array})" },
		{ "trigger": "count\t(array)", "contents": "count(${1:array})" },
		{ "trigger": "fill\t(array, value)", "contents": "fill(${1:array}, ${2:value})" },
		{ "trigger": "fill\t(array, value, size)", "contents": "fill(${1:array}, ${2:value}, ${3:size})" },
		{ "trigger": "inArray\t(array, element)", "contents": "inArray(${1:array}, ${2:element})" },
		{ "trigger": "insert\t(array, element, position)", "contents": "insert(${1:array}, ${2:element}, ${3:position})" },
		{ "trigger": "isEmpty\t(array)", "contents": "isEmpty(${1:array})" },
		{ "trigger": "join\t(array, glue)", "contents": "join(${1:array}, ${2:glue})" },
		{ "trigger": "keySort\t(array)", "contents": "keySort(${1:array})" },
		{ "trigger": "keySort\t(array, order)", "contents": "keySort(${1:array}, ${2:order})" },
		{ "trigger": "pop\t(array)", "contents": "pop(${1:array})" },
		{ "trigger": "push\t(array, element)", "contents": "push(${1:array}, ${2:element})" },
		{ "trigger": "pushAll\t(array, elements)", "contents": "pushAll(${1:array}, ${2:elements})" },
		{ "trigger": "remove\t(array, position)", "contents": "remove(${1:array}, ${2:position})" },
		{ "trigger": "removeElement\t(array, element)", "contents": "removeElement(${1:array}, ${2:element})" },
		{ "trigger": "removeKey\t(array, key)", "contents": "removeKey(${1:array}, ${2:key})" },
		{ "trigger": "reverse\t(array)", "contents": "reverse(${1:array})" },
		{ "trigger": "search\t(array, element)", "contents": "search(${1:array}, ${2:element})" },
		{ "trigger": "search\t(array, element, start)", "contents": "search(${1:array}, ${2:element}, ${3:start})" },
		{ "trigger": "shift\t(array)", "contents": "shift(${1:array})" },
		{ "trigger": "shuffle\t(array)", "contents": "shuffle(${1:array})" },
		{ "trigger": "sort\t(array)", "contents": "sort(${1:array})" },
		{ "trigger": "sort\t(array, order)", "contents": "sort(${1:array}, ${2:order})" },
		{ "trigger": "subArray\t(array, start, end)", "contents": "subArray(${1:array}, ${2:start}, ${3:end})" },
		{ "trigger": "sum\t(array)", "contents": "sum(${1:array})" },
		{ "trigger": "unshift\t(array, element)", "contents": "unshift(${1:array}, ${2:element})" },
		{ "trigger": "getAbsoluteShield", "contents": "getAbsoluteShield()" },
		{ "trigger": "getAbsoluteShield\t(leek)", "contents": "getAbsoluteShield(${1:leek})" },
		{ "trigger": "getAgility", "contents": "getAgility()" },
		{ "trigger": "getAgility\t(leek)", "contents": "getAgility(${1:leek})" },
		{ "trigger": "getAIID", "contents": "getAIID()" },
		{ "trigger": "getAIID\t(leek)", "contents": "getAIID(${1:leek})" },
		{ "trigger": "getAIName", "contents": "getAIName()" },
		{ "trigger": "getAIName\t(leek)", "contents": "getAIName(${1:leek})" },
		{ "trigger": "getBirthTurn", "contents": "getBirthTurn()" },
		{ "trigger": "getBirthTurn\t(entity)", "contents": "getBirthTurn(${1:entity})" },
		{ "trigger": "getCell", "contents": "getCell()" },
		{ "trigger": "getCell\t(leek)", "contents": "getCell(${1:leek})" },
		{ "trigger": "getChips", "contents": "getChips()" },
		{ "trigger": "getChips\t(leek)", "contents": "getChips(${1:leek})" },
		{ "trigger": "getCores", "contents": "getCores()" },
		{ "trigger": "getCores\t(leek)", "contents": "getCores(${1:leek})" },
		{ "trigger": "getEffects", "contents": "getEffects()" },
		{ "trigger": "getEffects\t(leek)", "contents": "getEffects(${1:leek})" },
		{ "trigger": "getEntityTurnOrder", "contents": "getEntityTurnOrder()" },
		{ "trigger": "getEntityTurnOrder\t(entity)", "contents": "getEntityTurnOrder(${1:entity})" },
		{ "trigger": "getFarmerID", "contents": "getFarmerID()" },
		{ "trigger": "getFarmerID\t(leek)", "contents": "getFarmerID(${1:leek})" },
		{ "trigger": "getFarmerName", "contents": "getFarmerName()" },
		{ "trigger": "getFarmerName\t(leek)", "contents": "getFarmerName(${1:leek})" },
		{ "trigger": "getForce", "contents": "getForce()" },
		{ "trigger": "getForce\t(leek)", "contents": "getForce(${1:leek})" },
		{ "trigger": "getFrequency", "contents": "getFrequency()" },
		{ "trigger": "getFrequency\t(leek)", "contents": "getFrequency(${1:leek})" },
		{ "trigger": "getLaunchedEffects", "contents": "getLaunchedEffects()" },
		{ "trigger": "getLaunchedEffects\t(leek)", "contents": "getLaunchedEffects(${1:leek})" },
		{ "trigger": "getLeek", "contents": "getLeek()" },
		{ "trigger": "getLeekID", "contents": "getLeekID()" },
		{ "trigger": "getLeekID\t(leek)", "contents": "getLeekID(${1:leek})" },
		{ "trigger": "getLevel", "contents": "getLevel()" },
		{ "trigger": "getLevel\t(leek)", "contents": "getLevel(${1:leek})" },
		{ "trigger": "getLife", "contents": "getLife()" },
		{ "trigger": "getLife\t(leek)", "contents": "getLife(${1:leek})" },
		{ "trigger": "getMagic", "contents": "getMagic()" },
		{ "trigger": "getMagic\t(leek)", "contents": "getMagic(${1:leek})" },
		{ "trigger": "getMP", "contents": "getMP()" },
		{ "trigger": "getMP\t(leek)", "contents": "getMP(${1:leek})" },
		{ "trigger": "getName", "contents": "getName()" },
		{ "trigger": "getName\t(leek)", "contents": "getName(${1:leek})" },
		{ "trigger": "getRelativeShield", "contents": "getRelativeShield()" },
		{ "trigger": "getRelativeShield\t(leek)", "contents": "getRelativeShield(${1:leek})" },
		{ "trigger": "getResistance", "contents": "getResistance()" },
		{ "trigger": "getResistance\t(leek)", "contents": "getResistance(${1:leek})" },
		{ "trigger": "getScience", "contents": "getScience()" },
		{ "trigger": "getScience\t(leek)", "contents": "getScience(${1:leek})" },
		{ "trigger": "getStrength", "contents": "getStrength()" },
		{ "trigger": "getStrength\t(leek)", "contents": "getStrength(${1:leek})" },
		{ "trigger": "getSummoner", "contents": "getSummoner()" },
		{ "trigger": "getSummoner\t(entity)", "contents": "getSummoner(${1:entity})" },
		{ "trigger": "getTeamID", "contents": "getTeamID()" },
		{ "trigger": "getTeamID\t(leek)", "contents": "getTeamID(${1:leek})" },
		{ "trigger": "getTeamName", "contents": "getTeamName()" },
		{ "trigger": "getTeamName\t(leek)", "contents": "getTeamName(${1:leek})" },
		{ "trigger": "getTotalLife", "contents": "getTotalLife()" },
		{ "trigger": "getTotalLife\t(leek)", "contents": "getTotalLife(${1:leek})" },
		{ "trigger": "getTotalMP", "contents": "getTotalMP()" },
		{ "trigger": "getTotalMP\t(leek)", "contents": "getTotalMP(${1:leek})" },
		{ "trigger": "getTotalTP", "contents": "getTotalTP()" },
		{ "trigger": "getTotalTP\t(leek)", "contents": "getTotalTP(${1:leek})" },
		{ "trigger": "getTP", "contents": "getTP()" },
		{ "trigger": "getTP\t(leek)", "contents": "getTP(${1:leek})" },
		{ "trigger": "getType", "contents": "getType()" },
		{ "trigger": "getType\t(entity)", "contents": "getType(${1:entity})" },
		{ "trigger": "getWeapon", "contents": "getWeapon()" },
		{ "trigger": "getWeapon\t(leek)", "contents": "getWeapon(${1:leek})" },
		{ "trigger": "getWeapons", "contents": "getWeapons()" },
		{ "trigger": "getWeapons\t(leek)", "contents": "getWeapons(${1:leek})" },
		{ "trigger": "getWisdom", "contents": "getWisdom()" },
		{ "trigger": "getWisdom\t(leek)", "contents": "getWisdom(${1:leek})" },
		{ "trigger": "isAlive\t(leek)", "contents": "isAlive(${1:leek})" },
		{ "trigger": "isAlly\t(leek)", "contents": "isAlly(${1:leek})" },
		{ "trigger": "isDead\t(leek)", "contents": "isDead(${1:leek})" },
		{ "trigger": "isEnemy\t(leek)", "contents": "isEnemy(${1:leek})" },
		{ "trigger": "isSummon", "contents": "isSummon()" },
		{ "trigger": "isSummon\t(entity)", "contents": "isSummon(${1:entity})" },
		{ "trigger": "listen", "contents": "listen()" },
		{ "trigger": "say\t(message)", "contents": "say(${1:message})" },
		{ "trigger": "setWeapon\t(weapon)", "contents": "setWeapon(${1:weapon})" },
		{ "trigger": "canUseWeapon\t(leek)", "contents": "canUseWeapon(${1:leek})" },
		{ "trigger": "canUseWeapon\t(weapon, leek)", "contents": "canUseWeapon(${1:weapon}, ${2:leek})" },
		{ "trigger": "canUseWeaponOnCell\t(cell)", "contents": "canUseWeaponOnCell(${1:cell})" },
		{ "trigger": "canUseWeaponOnCell\t(weapon, cell)", "contents": "canUseWeaponOnCell(${1:weapon}, ${2:cell})" },
		{ "trigger": "getWeaponArea\t(weapon)", "contents": "getWeaponArea(${1:weapon})" },
		{ "trigger": "getWeaponCost\t(weapon)", "contents": "getWeaponCost(${1:weapon})" },
		{ "trigger": "getWeaponEffectiveArea\t(cell)", "contents": "getWeaponEffectiveArea(${1:cell})" },
		{ "trigger": "getWeaponEffectiveArea\t(weapon, cell)", "contents": "getWeaponEffectiveArea(${1:weapon}, ${2:cell})" },
		{ "trigger": "getWeaponEffectiveArea\t(weapon, cell, from)", "contents": "getWeaponEffectiveArea(${1:weapon}, ${2:cell}, ${3:from})" },
		{ "trigger": "getWeaponEffects\t(weapon)", "contents": "getWeaponEffects(${1:weapon})" },
		{ "trigger": "getWeaponFailure\t(weapon)", "contents": "getWeaponFailure(${1:weapon})" },
		{ "trigger": "getWeaponMaxScope\t(weapon)", "contents": "getWeaponMaxScope(${1:weapon})" },
		{ "trigger": "getWeaponMinScope\t(weapon)", "contents": "getWeaponMinScope(${1:weapon})" },
		{ "trigger": "getWeaponName\t(weapon)", "contents": "getWeaponName(${1:weapon})" },
		{ "trigger": "isInlineWeapon\t(weapon)", "contents": "isInlineWeapon(${1:weapon})" },
		{ "trigger": "isWeapon\t(value)", "contents": "isWeapon(${1:value})" },
		{ "trigger": "useWeapon\t(leek)", "contents": "useWeapon(${1:leek})" },
		{ "trigger": "useWeaponOnCell\t(cell)", "contents": "useWeaponOnCell(${1:cell})" },
		{ "trigger": "weaponNeedLos", "contents": "weaponNeedLos()" },
		{ "trigger": "weaponNeedLos\t(weapon)", "contents": "weaponNeedLos(${1:weapon})" },
		{ "trigger": "canUseChip\t(chip, leek)", "contents": "canUseChip(${1:chip}, ${2:leek})" },
		{ "trigger": "canUseChipOnCell\t(chip, cell)", "contents": "canUseChipOnCell(${1:chip}, ${2:cell})" },
		{ "trigger": "chipNeedLos\t(chip)", "contents": "chipNeedLos(${1:chip})" },
		{ "trigger": "getChipArea\t(chip)", "contents": "getChipArea(${1:chip})" },
		{ "trigger": "getChipCooldown\t(chip)", "contents": "getChipCooldown(${1:chip})" },
		{ "trigger": "getChipCost\t(chip)", "contents": "getChipCost(${1:chip})" },
		{ "trigger": "getChipEffectiveArea\t(chip, cell)", "contents": "getChipEffectiveArea(${1:chip}, ${2:cell})" },
		{ "trigger": "getChipEffectiveArea\t(chip, cell, from)", "contents": "getChipEffectiveArea(${1:chip}, ${2:cell}, ${3:from})" },
		{ "trigger": "getChipEffects\t(chip)", "contents": "getChipEffects(${1:chip})" },
		{ "trigger": "getChipFailure\t(chip)", "contents": "getChipFailure(${1:chip})" },
		{ "trigger": "getChipMaxScope\t(chip)", "contents": "getChipMaxScope(${1:chip})" },
		{ "trigger": "getChipMinScope\t(chip)", "contents": "getChipMinScope(${1:chip})" },
		{ "trigger": "getChipName\t(chip)", "contents": "getChipName(${1:chip})" },
		{ "trigger": "getCooldown\t(chip)", "contents": "getCooldown(${1:chip})" },
		{ "trigger": "getCooldown\t(chip, leek)", "contents": "getCooldown(${1:chip}, ${2:leek})" },
		{ "trigger": "isChip\t(value)", "contents": "isChip(${1:value})" },
		{ "trigger": "isInlineChip\t(chip)", "contents": "isInlineChip(${1:chip})" },
		{ "trigger": "resurrect\t(entity, cell)", "contents": "resurrect(${1:entity}, ${2:cell})" },
		{ "trigger": "summon\t(chip, cell, ai)", "contents": "summon(${1:chip}, ${2:cell}, ${3:ai})" },
		{ "trigger": "useChip\t(chip, leek)", "contents": "useChip(${1:chip}, ${2:leek})" },
		{ "trigger": "useChipOnCell\t(chip, cell)", "contents": "useChipOnCell(${1:chip}, ${2:cell})" },
		{ "trigger": "getCellContent\t(cell)", "contents": "getCellContent(${1:cell})" },
		{ "trigger": "getCellDistance\t(cell1, cell2)", "contents": "getCellDistance(${1:cell1}, ${2:cell2})" },
		{ "trigger": "getCellFromXY\t(x, y)", "contents": "getCellFromXY(${1:x}, ${2:y})" },
		{ "trigger": "getCellX\t(cell)", "contents": "getCellX(${1:cell})" },
		{ "trigger": "getCellY\t(cell)", "contents": "getCellY(${1:cell})" },
		{ "trigger": "getDistance\t(cell1, cell2)", "contents": "getDistance(${1:cell1}, ${2:cell2})" },
		{ "trigger": "getLeekOnCell\t(cell)", "contents": "getLeekOnCell(${1:cell})" },
		{ "trigger": "getMapType", "contents": "getMapType()" },
		{ "trigger": "getObstacles", "contents": "getObstacles()" },
		{ "trigger": "getPath\t(cell1, cell2)", "contents": "getPath(${1:cell1}, ${2:cell2})" },
		{ "trigger": "getPath\t(start, end, ignoredCells)", "contents": "getPath(${1:start}, ${2:end}, ${3:ignoredCells})" },
		{ "trigger": "getPathLength\t(cell1, cell2)", "contents": "getPathLength(${1:cell1}, ${2:cell2})" },
		{ "trigger": "getPathLength\t(cell1, cell2, ignoredCells)", "contents": "getPathLength(${1:cell1}, ${2:cell2}, ${3:ignoredCells})" },
		{ "trigger": "isEmptyCell\t(cell)", "contents": "isEmptyCell(${1:cell})" },
		{ "trigger": "isLeek\t(cell)", "contents": "isLeek(${1:cell})" },
		{ "trigger": "isObstacle\t(cell)", "contents": "isObstacle(${1:cell})" },
		{ "trigger": "isOnSameLine\t(cell1, cell2)", "contents": "isOnSameLine(${1:cell1}, ${2:cell2})" },
		{ "trigger": "getAliveAllies", "contents": "getAliveAllies()" },
		{ "trigger": "getAliveEnemies", "contents": "getAliveEnemies()" },
		{ "trigger": "getAliveEnemiesCount", "contents": "getAliveEnemiesCount()" },
		{ "trigger": "getAllies", "contents": "getAllies()" },
		{ "trigger": "getAlliesCount", "contents": "getAlliesCount()" },
		{ "trigger": "getAlliesLife", "contents": "getAlliesLife()" },
		{ "trigger": "getCellsToUseChip\t(chip, leek)", "contents": "getCellsToUseChip(${1:chip}, ${2:leek})" },
		{ "trigger": "getCellsToUseChip\t(chip, leek, ignoredCells)", "contents": "getCellsToUseChip(${1:chip}, ${2:leek}, ${3:ignoredCells})" },
		{ "trigger": "getCellsToUseChipOnCell\t(chip, cell)", "contents": "getCellsToUseChipOnCell(${1:chip}, ${2:cell})" },
		{ "trigger": "getCellsToUseChipOnCell\t(chip, cell, ignoredCells)", "contents": "getCellsToUseChipOnCell(${1:chip}, ${2:cell}, ${3:ignoredCells})" },
		{ "trigger": "getCellsToUseWeapon\t(leek)", "contents": "getCellsToUseWeapon(${1:leek})" },
		{ "trigger": "getCellsToUseWeapon\t(weapon, leek)", "contents": "getCellsToUseWeapon(${1:weapon}, ${2:leek})" },
		{ "trigger": "getCellsToUseWeapon\t(weapon, leek, ignoredCells)", "contents": "getCellsToUseWeapon(${1:weapon}, ${2:leek}, ${3:ignoredCells})" },
		{ "trigger": "getCellsToUseWeaponOnCell\t(cell)", "contents": "getCellsToUseWeaponOnCell(${1:cell})" },
		{ "trigger": "getCellsToUseWeaponOnCell\t(weapon, cell)", "contents": "getCellsToUseWeaponOnCell(${1:weapon}, ${2:cell})" },
		{ "trigger": "getCellsToUseWeaponOnCell\t(weapon, cell, ignoredCells)", "contents": "getCellsToUseWeaponOnCell(${1:weapon}, ${2:cell}, ${3:ignoredCells})" },
		{ "trigger": "getCellToUseChip\t(chip, leek)", "contents": "getCellToUseChip(${1:chip}, ${2:leek})" },
		{ "trigger": "getCellToUseChip\t(chip, cell, ignoredCells)", "contents": "getCellToUseChip(${1:chip}, ${2:cell}, ${3:ignoredCells})" },
		{ "trigger": "getCellToUseChipOnCell\t(chip, cell, ignoredCells)", "contents": "getCellToUseChipOnCell(${1:chip}, ${2:cell}, ${3:ignoredCells})" },
		{ "trigger": "getCellToUseChipOnCell\t(chip, cell)", "contents": "getCellToUseChipOnCell(${1:chip}, ${2:cell})" },
		{ "trigger": "getCellToUseWeapon\t(leek)", "contents": "getCellToUseWeapon(${1:leek})" },
		{ "trigger": "getCellToUseWeapon\t(weapon, leek)", "contents": "getCellToUseWeapon(${1:weapon}, ${2:leek})" },
		{ "trigger": "getCellToUseWeapon\t(weapon, leek, ignoredCells)", "contents": "getCellToUseWeapon(${1:weapon}, ${2:leek}, ${3:ignoredCells})" },
		{ "trigger": "getCellToUseWeaponOnCell\t(cell)", "contents": "getCellToUseWeaponOnCell(${1:cell})" },
		{ "trigger": "getCellToUseWeaponOnCell\t(weapon, cell)", "contents": "getCellToUseWeaponOnCell(${1:weapon}, ${2:cell})" },
		{ "trigger": "getCellToUseWeaponOnCell\t(weapon, cell, ignoredCells)", "contents": "getCellToUseWeaponOnCell(${1:weapon}, ${2:cell}, ${3:ignoredCells})" },
		{ "trigger": "getChipTargets\t(chip, cell)", "contents": "getChipTargets(${1:chip}, ${2:cell})" },
		{ "trigger": "getDeadAllies", "contents": "getDeadAllies()" },
		{ "trigger": "getDeadEnemies", "contents": "getDeadEnemies()" },
		{ "trigger": "getDeadEnemiesCount", "contents": "getDeadEnemiesCount()" },
		{ "trigger": "getEnemies", "contents": "getEnemies()" },
		{ "trigger": "getEnemiesCount", "contents": "getEnemiesCount()" },
		{ "trigger": "getEnemiesLife", "contents": "getEnemiesLife()" },
		{ "trigger": "getFarthestAlly", "contents": "getFarthestAlly()" },
		{ "trigger": "getFarthestEnemy", "contents": "getFarthestEnemy()" },
		{ "trigger": "getFightContext", "contents": "getFightContext()" },
		{ "trigger": "getFightType", "contents": "getFightType()" },
		{ "trigger": "getNearestAlly", "contents": "getNearestAlly()" },
		{ "trigger": "getNearestAllyTo\t(leek)", "contents": "getNearestAllyTo(${1:leek})" },
		{ "trigger": "getNearestAllyToCell\t(cell)", "contents": "getNearestAllyToCell(${1:cell})" },
		{ "trigger": "getNearestEnemy", "contents": "getNearestEnemy()" },
		{ "trigger": "getNearestEnemyTo\t(leek)", "contents": "getNearestEnemyTo(${1:leek})" },
		{ "trigger": "getNearestEnemyToCell\t(cell)", "contents": "getNearestEnemyToCell(${1:cell})" },
		{ "trigger": "getNextPlayer", "contents": "getNextPlayer()" },
		{ "trigger": "getPreviousPlayer", "contents": "getPreviousPlayer()" },
		{ "trigger": "getTurn", "contents": "getTurn()" },
		{ "trigger": "getWeaponTargets\t(cell)", "contents": "getWeaponTargets(${1:cell})" },
		{ "trigger": "getWeaponTargets\t(weapon, cell)", "contents": "getWeaponTargets(${1:weapon}, ${2:cell})" },
		{ "trigger": "lineOfSight\t(start, end)", "contents": "lineOfSight(${1:start}, ${2:end})" },
		{ "trigger": "lineOfSight\t(start, end, leekToIgnore)", "contents": "lineOfSight(${1:start}, ${2:end}, ${3:leekToIgnore})" },
		{ "trigger": "moveAwayFrom\t(leek)", "contents": "moveAwayFrom(${1:leek})" },
		{ "trigger": "moveAwayFrom\t(leek, mp)", "contents": "moveAwayFrom(${1:leek}, ${2:mp})" },
		{ "trigger": "moveAwayFromCell\t(cell)", "contents": "moveAwayFromCell(${1:cell})" },
		{ "trigger": "moveAwayFromCell\t(cell, mp)", "contents": "moveAwayFromCell(${1:cell}, ${2:mp})" },
		{ "trigger": "moveAwayFromCells\t(cells)", "contents": "moveAwayFromCells(${1:cells})" },
		{ "trigger": "moveAwayFromCells\t(cells, mp)", "contents": "moveAwayFromCells(${1:cells}, ${2:mp})" },
		{ "trigger": "moveAwayFromLeeks\t(leeks)", "contents": "moveAwayFromLeeks(${1:leeks})" },
		{ "trigger": "moveAwayFromLeeks\t(leeks, mp)", "contents": "moveAwayFromLeeks(${1:leeks}, ${2:mp})" },
		{ "trigger": "moveAwayFromLine\t(cell1, cell2)", "contents": "moveAwayFromLine(${1:cell1}, ${2:cell2})" },
		{ "trigger": "moveAwayFromLine\t(cell1, cell2, mp)", "contents": "moveAwayFromLine(${1:cell1}, ${2:cell2}, ${3:mp})" },
		{ "trigger": "moveToward\t(leek)", "contents": "moveToward(${1:leek})" },
		{ "trigger": "moveToward\t(leek, mp)", "contents": "moveToward(${1:leek}, ${2:mp})" },
		{ "trigger": "moveTowardCell\t(cell)", "contents": "moveTowardCell(${1:cell})" },
		{ "trigger": "moveTowardCell\t(cell, mp)", "contents": "moveTowardCell(${1:cell}, ${2:mp})" },
		{ "trigger": "moveTowardCells\t(cells)", "contents": "moveTowardCells(${1:cells})" },
		{ "trigger": "moveTowardCells\t(cells, mp)", "contents": "moveTowardCells(${1:cells}, ${2:mp})" },
		{ "trigger": "moveTowardLeeks\t(leeks)", "contents": "moveTowardLeeks(${1:leeks})" },
		{ "trigger": "moveTowardLeeks\t(leeks, mp)", "contents": "moveTowardLeeks(${1:leeks}, ${2:mp})" },
		{ "trigger": "moveTowardLine\t(cell1, cell2)", "contents": "moveTowardLine(${1:cell1}, ${2:cell2})" },
		{ "trigger": "moveTowardLine\t(cell1, cell2, mp)", "contents": "moveTowardLine(${1:cell1}, ${2:cell2}, ${3:mp})" },
		{ "trigger": "debug\t(object)", "contents": "debug(${1:object})" },
		{ "trigger": "debugE\t(object)", "contents": "debugE(${1:object})" },
		{ "trigger": "debugW\t(object)", "contents": "debugW(${1:object})" },
		{ "trigger": "deleteRegister\t(key)", "contents": "deleteRegister(${1:key})" },
		{ "trigger": "getInstructionsCount", "contents": "getInstructionsCount()" },
		{ "trigger": "getOperations", "contents": "getOperations()" },
		{ "trigger": "getRegister\t(key)", "contents": "getRegister(${1:key})" },
		{ "trigger": "getRegisters", "contents": "getRegisters()" },
		{ "trigger": "include\t(ai)", "contents": "include(${1:ai})" },
		{ "trigger": "mark\t(cells)", "contents": "mark(${1:cells})" },
		{ "trigger": "mark\t(cells, color)", "contents": "mark(${1:cells}, ${2:color})" },
		{ "trigger": "mark\t(cells, color, duration)", "contents": "mark(${1:cells}, ${2:color}, ${3:duration})" },
		{ "trigger": "pause", "contents": "pause()" },
		{ "trigger": "setRegister\t(key, value)", "contents": "setRegister(${1:key}, ${2:value})" },
		{ "trigger": "show\t(cell)", "contents": "show(${1:cell})" },
		{ "trigger": "show\t(cell, color)", "contents": "show(${1:cell}, ${2:color})" },
		{ "trigger": "typeOf\t(value)", "contents": "typeOf(${1:value})" },
		{ "trigger": "getMessageAuthor\t(message)", "contents": "getMessageAuthor(${1:message})" },
		{ "trigger": "getMessageParams\t(message)", "contents": "getMessageParams(${1:message})" },
		{ "trigger": "getMessages", "contents": "getMessages()" },
		{ "trigger": "getMessages\t(leek)", "contents": "getMessages(${1:leek})" },
		{ "trigger": "getMessageType\t(message)", "contents": "getMessageType(${1:message})" },
		{ "trigger": "sendAll\t(type, params)", "contents": "sendAll(${1:type}, ${2:params})" },
		{ "trigger": "sendTo\t(leek, type, params)", "contents": "sendTo(${1:leek}, ${2:type}, ${3:params})" },
		{ "trigger": "getBlue\t(color)", "contents": "getBlue(${1:color})" },
		{ "trigger": "getColor\t(red, green, blue)", "contents": "getColor(${1:red}, ${2:green}, ${3:blue})" },
		{ "trigger": "getGreen\t(color)", "contents": "getGreen(${1:color})" },
		{ "trigger": "getRed\t(color)", "contents": "getRed(${1:color})" },
		{ "trigger": "E", "contents": "E" },
		{ "trigger": "PI", "contents": "PI" },
		{ "trigger": "SORT_ASC", "contents": "SORT_ASC" },
		{ "trigger": "SORT_DESC", "contents": "SORT_DESC" },
		{ "trigger": "EFFECT_ABSOLUTE_SHIELD", "contents": "EFFECT_ABSOLUTE_SHIELD" },
		{ "trigger": "EFFECT_BOOST_MAX_LIFE", "contents": "EFFECT_BOOST_MAX_LIFE" },
		{ "trigger": "EFFECT_BUFF_AGILITY", "contents": "EFFECT_BUFF_AGILITY" },
		{ "trigger": "EFFECT_BUFF_FORCE", "contents": "EFFECT_BUFF_FORCE" },
		{ "trigger": "EFFECT_BUFF_MP", "contents": "EFFECT_BUFF_MP" },
		{ "trigger": "EFFECT_BUFF_RESISTANCE", "contents": "EFFECT_BUFF_RESISTANCE" },
		{ "trigger": "EFFECT_BUFF_STRENGTH", "contents": "EFFECT_BUFF_STRENGTH" },
		{ "trigger": "EFFECT_BUFF_TP", "contents": "EFFECT_BUFF_TP" },
		{ "trigger": "EFFECT_BUFF_WISDOM", "contents": "EFFECT_BUFF_WISDOM" },
		{ "trigger": "EFFECT_DAMAGE", "contents": "EFFECT_DAMAGE" },
		{ "trigger": "EFFECT_DAMAGE_RETURN", "contents": "EFFECT_DAMAGE_RETURN" },
		{ "trigger": "EFFECT_DEBUFF", "contents": "EFFECT_DEBUFF" },
		{ "trigger": "EFFECT_HEAL", "contents": "EFFECT_HEAL" },
		{ "trigger": "EFFECT_INVERT", "contents": "EFFECT_INVERT" },
		{ "trigger": "EFFECT_KILL", "contents": "EFFECT_KILL" },
		{ "trigger": "EFFECT_POISON", "contents": "EFFECT_POISON" },
		{ "trigger": "EFFECT_RELATIVE_SHIELD", "contents": "EFFECT_RELATIVE_SHIELD" },
		{ "trigger": "EFFECT_RESURRECT", "contents": "EFFECT_RESURRECT" },
		{ "trigger": "EFFECT_SHACKLE_MP", "contents": "EFFECT_SHACKLE_MP" },
		{ "trigger": "EFFECT_SHACKLE_STRENGTH", "contents": "EFFECT_SHACKLE_STRENGTH" },
		{ "trigger": "EFFECT_SHACKLE_TP", "contents": "EFFECT_SHACKLE_TP" },
		{ "trigger": "EFFECT_SUMMON", "contents": "EFFECT_SUMMON" },
		{ "trigger": "EFFECT_TARGET_ALLIES", "contents": "EFFECT_TARGET_ALLIES" },
		{ "trigger": "EFFECT_TARGET_CASTER", "contents": "EFFECT_TARGET_CASTER" },
		{ "trigger": "EFFECT_TARGET_ENEMIES", "contents": "EFFECT_TARGET_ENEMIES" },
		{ "trigger": "EFFECT_TARGET_NON_SUMMONS", "contents": "EFFECT_TARGET_NON_SUMMONS" },
		{ "trigger": "EFFECT_TARGET_NOT_CASTER", "contents": "EFFECT_TARGET_NOT_CASTER" },
		{ "trigger": "EFFECT_TARGET_SUMMONS", "contents": "EFFECT_TARGET_SUMMONS" },
		{ "trigger": "EFFECT_TELEPORT", "contents": "EFFECT_TELEPORT" },
		{ "trigger": "ENTITY_BULB", "contents": "ENTITY_BULB" },
		{ "trigger": "ENTITY_LEEK", "contents": "ENTITY_LEEK" },
		{ "trigger": "USE_FAILED", "contents": "USE_FAILED" },
		{ "trigger": "USE_INVALID_COOLDOWN", "contents": "USE_INVALID_COOLDOWN" },
		{ "trigger": "USE_INVALID_POSITION", "contents": "USE_INVALID_POSITION" },
		{ "trigger": "USE_INVALID_TARGET", "contents": "USE_INVALID_TARGET" },
		{ "trigger": "USE_NOT_ENOUGH_TP", "contents": "USE_NOT_ENOUGH_TP" },
		{ "trigger": "USE_SUCCESS", "contents": "USE_SUCCESS" },
		{ "trigger": "USE_TOO_MANY_SUMMONS", "contents": "USE_TOO_MANY_SUMMONS" },
		{ "trigger": "WEAPON_B_LASER", "contents": "WEAPON_B_LASER" },
		{ "trigger": "WEAPON_DESTROYER", "contents": "WEAPON_DESTROYER" },
		{ "trigger": "WEAPON_DOUBLE_GUN", "contents": "WEAPON_DOUBLE_GUN" },
		{ "trigger": "WEAPON_ELECTRISOR", "contents": "WEAPON_ELECTRISOR" },
		{ "trigger": "WEAPON_FLAME_THROWER", "contents": "WEAPON_FLAME_THROWER" },
		{ "trigger": "WEAPON_GAZOR", "contents": "WEAPON_GAZOR" },
		{ "trigger": "WEAPON_GRENADE_LAUNCHER", "contents": "WEAPON_GRENADE_LAUNCHER" },
		{ "trigger": "WEAPON_LASER", "contents": "WEAPON_LASER" },
		{ "trigger": "WEAPON_MACHINE_GUN", "contents": "WEAPON_MACHINE_GUN" },
		{ "trigger": "WEAPON_MAGNUM", "contents": "WEAPON_MAGNUM" },
		{ "trigger": "WEAPON_M_LASER", "contents": "WEAPON_M_LASER" },
		{ "trigger": "WEAPON_PISTOL", "contents": "WEAPON_PISTOL" },
		{ "trigger": "WEAPON_SHOTGUN", "contents": "WEAPON_SHOTGUN" },
		{ "trigger": "CHIP_ACCELERATION", "contents": "CHIP_ACCELERATION" },
		{ "trigger": "CHIP_ACCELERATION", "contents": "CHIP_ACCELERATION" },
		{ "trigger": "CHIP_ADRENALINE", "contents": "CHIP_ADRENALINE" },
		{ "trigger": "CHIP_ARMOR", "contents": "CHIP_ARMOR" },
		{ "trigger": "CHIP_ARMORING", "contents": "CHIP_ARMORING" },
		{ "trigger": "CHIP_BALL_AND_CHAIN", "contents": "CHIP_BALL_AND_CHAIN" },
		{ "trigger": "CHIP_BANDAGE", "contents": "CHIP_BANDAGE" },
		{ "trigger": "CHIP_BARK", "contents": "CHIP_BARK" },
		{ "trigger": "CHIP_BURNING", "contents": "CHIP_BURNING" },
		{ "trigger": "CHIP_CARAPACE", "contents": "CHIP_CARAPACE" },
		{ "trigger": "CHIP_COLLAR", "contents": "CHIP_COLLAR" },
		{ "trigger": "CHIP_CURE", "contents": "CHIP_CURE" },
		{ "trigger": "CHIP_DEVIL_STRIKE", "contents": "CHIP_DEVIL_STRIKE" },
		{ "trigger": "CHIP_DOPING", "contents": "CHIP_DOPING" },
		{ "trigger": "CHIP_DRIP", "contents": "CHIP_DRIP" },
		{ "trigger": "CHIP_FEROCITY", "contents": "CHIP_FEROCITY" },
		{ "trigger": "CHIP_FERTILIZER", "contents": "CHIP_FERTILIZER" },
		{ "trigger": "CHIP_FERTILIZER", "contents": "CHIP_FERTILIZER" },
		{ "trigger": "CHIP_FIRE_BULB", "contents": "CHIP_FIRE_BULB" },
		{ "trigger": "CHIP_FLAME", "contents": "CHIP_FLAME" },
		{ "trigger": "CHIP_FLASH", "contents": "CHIP_FLASH" },
		{ "trigger": "CHIP_FORTRESS", "contents": "CHIP_FORTRESS" },
		{ "trigger": "CHIP_FRACTURE", "contents": "CHIP_FRACTURE" },
		{ "trigger": "CHIP_HEALER_BULB", "contents": "CHIP_HEALER_BULB" },
		{ "trigger": "CHIP_HELMET", "contents": "CHIP_HELMET" },
		{ "trigger": "CHIP_ICE", "contents": "CHIP_ICE" },
		{ "trigger": "CHIP_ICEBERG", "contents": "CHIP_ICEBERG" },
		{ "trigger": "CHIP_ICED_BULB", "contents": "CHIP_ICED_BULB" },
		{ "trigger": "CHIP_INVERSION", "contents": "CHIP_INVERSION" },
		{ "trigger": "CHIP_LEATHER_BOOTS", "contents": "CHIP_LEATHER_BOOTS" },
		{ "trigger": "CHIP_LIBERATION", "contents": "CHIP_LIBERATION" },
		{ "trigger": "CHIP_LIGHTNING", "contents": "CHIP_LIGHTNING" },
		{ "trigger": "CHIP_LIGHTNING_BULB", "contents": "CHIP_LIGHTNING_BULB" },
		{ "trigger": "CHIP_LOAM", "contents": "CHIP_LOAM" },
		{ "trigger": "CHIP_METALLIC_BULB", "contents": "CHIP_METALLIC_BULB" },
		{ "trigger": "CHIP_METEORITE", "contents": "CHIP_METEORITE" },
		{ "trigger": "CHIP_MIRROR", "contents": "CHIP_MIRROR" },
		{ "trigger": "CHIP_MOTIVATION", "contents": "CHIP_MOTIVATION" },
		{ "trigger": "CHIP_PEBBLE", "contents": "CHIP_PEBBLE" },
		{ "trigger": "CHIP_PLAGUE", "contents": "CHIP_PLAGUE" },
		{ "trigger": "CHIP_PROTEIN", "contents": "CHIP_PROTEIN" },
		{ "trigger": "CHIP_PUNY_BULB", "contents": "CHIP_PUNY_BULB" },
		{ "trigger": "CHIP_RAGE", "contents": "CHIP_RAGE" },
		{ "trigger": "CHIP_RAMPART", "contents": "CHIP_RAMPART" },
		{ "trigger": "CHIP_REFLEXES", "contents": "CHIP_REFLEXES" },
		{ "trigger": "CHIP_REGENERATION", "contents": "CHIP_REGENERATION" },
		{ "trigger": "CHIP_REMISSION", "contents": "CHIP_REMISSION" },
		{ "trigger": "CHIP_RESURRECTION", "contents": "CHIP_RESURRECTION" },
		{ "trigger": "CHIP_ROCK", "contents": "CHIP_ROCK" },
		{ "trigger": "CHIP_ROCKFALL", "contents": "CHIP_ROCKFALL" },
		{ "trigger": "CHIP_ROCKY_BULB", "contents": "CHIP_ROCKY_BULB" },
		{ "trigger": "CHIP_SEVEN_LEAGUE_BOOTS", "contents": "CHIP_SEVEN_LEAGUE_BOOTS" },
		{ "trigger": "CHIP_SHIELD", "contents": "CHIP_SHIELD" },
		{ "trigger": "CHIP_SHOCK", "contents": "CHIP_SHOCK" },
		{ "trigger": "CHIP_SLOW_DOWN", "contents": "CHIP_SLOW_DOWN" },
		{ "trigger": "CHIP_SOLIDIFICATION", "contents": "CHIP_SOLIDIFICATION" },
		{ "trigger": "CHIP_SOPORIFIC", "contents": "CHIP_SOPORIFIC" },
		{ "trigger": "CHIP_SPARK", "contents": "CHIP_SPARK" },
		{ "trigger": "CHIP_STALACTITE", "contents": "CHIP_STALACTITE" },
		{ "trigger": "CHIP_STEROID", "contents": "CHIP_STEROID" },
		{ "trigger": "CHIP_STRETCHING", "contents": "CHIP_STRETCHING" },
		{ "trigger": "CHIP_TELEPORTATION", "contents": "CHIP_TELEPORTATION" },
		{ "trigger": "CHIP_THORN", "contents": "CHIP_THORN" },
		{ "trigger": "CHIP_TOXIN", "contents": "CHIP_TOXIN" },
		{ "trigger": "CHIP_TRANQUILIZER", "contents": "CHIP_TRANQUILIZER" },
		{ "trigger": "CHIP_VACCINE", "contents": "CHIP_VACCINE" },
		{ "trigger": "CHIP_VENOM", "contents": "CHIP_VENOM" },
		{ "trigger": "CHIP_WALL", "contents": "CHIP_WALL" },
		{ "trigger": "CHIP_WARM_UP", "contents": "CHIP_WARM_UP" },
		{ "trigger": "CHIP_WHIP", "contents": "CHIP_WHIP" },
		{ "trigger": "CHIP_WHIP", "contents": "CHIP_WHIP" },
		{ "trigger": "CHIP_WINGED_BOOTS", "contents": "CHIP_WINGED_BOOTS" },
		{ "trigger": "USE_RESURRECT_INVALID_ENTITY", "contents": "USE_RESURRECT_INVALID_ENTITY" },
		{ "trigger": "CELL_EMPTY", "contents": "CELL_EMPTY" },
		{ "trigger": "CELL_OBSTACLE", "contents": "CELL_OBSTACLE" },
		{ "trigger": "CELL_PLAYER", "contents": "CELL_PLAYER" },
		{ "trigger": "MAP_BEACH", "contents": "MAP_BEACH" },
		{ "trigger": "MAP_DESERT", "contents": "MAP_DESERT" },
		{ "trigger": "MAP_FACTORY", "contents": "MAP_FACTORY" },
		{ "trigger": "MAP_FOREST", "contents": "MAP_FOREST" },
		{ "trigger": "MAP_GLACIER", "contents": "MAP_GLACIER" },
		{ "trigger": "MAP_NEXUS", "contents": "MAP_NEXUS" },
		{ "trigger": "AREA_CIRCLE_1", "contents": "AREA_CIRCLE_1" },
		{ "trigger": "AREA_CIRCLE_2", "contents": "AREA_CIRCLE_2" },
		{ "trigger": "AREA_CIRCLE_3", "contents": "AREA_CIRCLE_3" },
		{ "trigger": "AREA_LASER_LINE", "contents": "AREA_LASER_LINE" },
		{ "trigger": "AREA_POINT", "contents": "AREA_POINT" },
		{ "trigger": "FIGHT_CONTEXT_CHALLENGE", "contents": "FIGHT_CONTEXT_CHALLENGE" },
		{ "trigger": "FIGHT_CONTEXT_GARDEN", "contents": "FIGHT_CONTEXT_GARDEN" },
		{ "trigger": "FIGHT_CONTEXT_TEST", "contents": "FIGHT_CONTEXT_TEST" },
		{ "trigger": "FIGHT_CONTEXT_TOURNAMENT", "contents": "FIGHT_CONTEXT_TOURNAMENT" },
		{ "trigger": "FIGHT_TYPE_FARMER", "contents": "FIGHT_TYPE_FARMER" },
		{ "trigger": "FIGHT_TYPE_SOLO", "contents": "FIGHT_TYPE_SOLO" },
		{ "trigger": "FIGHT_TYPE_TEAM", "contents": "FIGHT_TYPE_TEAM" },
		{ "trigger": "MAX_TURNS", "contents": "MAX_TURNS" },
		{ "trigger": "INSTRUCTIONS_LIMIT", "contents": "INSTRUCTIONS_LIMIT" },
		{ "trigger": "OPERATIONS_LIMIT", "contents": "OPERATIONS_LIMIT" },
		{ "trigger": "TYPE_ARRAY", "contents": "TYPE_ARRAY" },
		{ "trigger": "TYPE_BOOLEAN", "contents": "TYPE_BOOLEAN" },
		{ "trigger": "TYPE_FUNCTION", "contents": "TYPE_FUNCTION" },
		{ "trigger": "TYPE_NULL", "contents": "TYPE_NULL" },
		{ "trigger": "TYPE_NUMBER", "contents": "TYPE_NUMBER" },
		{ "trigger": "TYPE_STRING", "contents": "TYPE_STRING" },
		{ "trigger": "MESSAGE_ATTACK", "contents": "MESSAGE_ATTACK" },
		{ "trigger": "MESSAGE_BUFF_AGILITY", "contents": "MESSAGE_BUFF_AGILITY" },
		{ "trigger": "MESSAGE_BUFF_FORCE", "contents": "MESSAGE_BUFF_FORCE" },
		{ "trigger": "MESSAGE_BUFF_MP", "contents": "MESSAGE_BUFF_MP" },
		{ "trigger": "MESSAGE_BUFF_TP", "contents": "MESSAGE_BUFF_TP" },
		{ "trigger": "MESSAGE_CUSTOM", "contents": "MESSAGE_CUSTOM" },
		{ "trigger": "MESSAGE_DEBUFF", "contents": "MESSAGE_DEBUFF" },
		{ "trigger": "MESSAGE_HEAL", "contents": "MESSAGE_HEAL" },
		{ "trigger": "MESSAGE_MOVE_AWAY", "contents": "MESSAGE_MOVE_AWAY" },
		{ "trigger": "MESSAGE_MOVE_AWAY_CELL", "contents": "MESSAGE_MOVE_AWAY_CELL" },
		{ "trigger": "MESSAGE_MOVE_TOWARD", "contents": "MESSAGE_MOVE_TOWARD" },
		{ "trigger": "MESSAGE_MOVE_TOWARD_CELL", "contents": "MESSAGE_MOVE_TOWARD_CELL" },
		{ "trigger": "MESSAGE_SHIELD", "contents": "MESSAGE_SHIELD" },
		{ "trigger": "COLOR_BLUE", "contents": "COLOR_BLUE" },
		{ "trigger": "COLOR_GREEN", "contents": "COLOR_GREEN" },
		{ "trigger": "COLOR_RED", "contents": "COLOR_RED" },
		{ "trigger": "lama", "contents": "lama()" }
	]
}